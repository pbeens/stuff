Alberta

COURSE CSE1220: CLIENT-SIDE SCRIPTING 2

Level: Introductory

Prerequisite: None
	Note: CSE1210: Client-side Scripting 1 or an equivalent course dealing with markup scripting is strongly recommended

Description: Students deepen their understanding of Internet computing by using more advanced markup language techniques and by being introduced to one or more Web-specific scripting languages. As part of this process, students learn how the Web uses these resources as a means of displaying dynamic client-side information. Students learn how to analyze, modify, write and debug algorithms and scripts that use structured programming approaches.

Parameters: Access to appropriate computer equipment, software, support materials and the Internet. More specifically, students must have the tools they will require to design, write and debug hypermedia documents and Internet scripts.

Supporting Courses: CSE1210: Client-side Scripting 1
	CSE1110: Structured Programming 1
	CSE1120: Structured Programming 2

Outcomes: The student will:

1. compare and contrast static and dynamic client-side scripting
    1.1 describe and illustrate the main differences, from the user's perspective, between dynamic and static client-side Web sites
    1.2 describe and illustrate the main differences between how dynamic and static client-side sites are implemented by the Web
    1.3 describe and illustrate the main advantages and disadvantages of dynamic and static client-side sites

2. design, write and debug scripts that use advanced markup language approaches to provide some aspects of dynamic client-side site construction
    2.1 describe how markup languages can be used to provide a limited amount of client-side dynamic display through the use of forms and style sheets
    2.2 use appropriate techniques to design a hypertext document that employs forms and style sheets including:
        2.2.1 determine and outline the intent of the document
        2.2.2 use appropriate problem decomposition techniques to organize the document into smaller components or pages and to identify locations of any required anchors and links
        2.2.3 determine the content to be carried on each page and how that content is to be displayed
        2.2.4 identify what role style sheets have in controlling page display
        2.2.5 determine what role forms have in managing input and subsequent interaction
    2.3 write and debug scripts that translate design documents employing forms and style sheets into client-side sites by:
        2.3.1 identifying and using appropriate techniques for separating content and presentation through the use of inline and/or embedded style sheets
        2.3.2 identifying and using appropriate techniques for soliciting user input through the use of forms 
        2.3.3 using appropriate techniques to determine if the script will achieve the original intent
        2.3.4 using appropriate internal and external documentation

3. describe the general nature and purpose of Internet-oriented scripting languages
    3.1 describe the role scripting languages play in the creation of Web sites
    3.2 compare and contrast scripting languages with markup languages and with general purpose programming languages
    3.3 describe and illustrate the development of Internet-oriented scripting languages in general terms
    3.4 describe and illustrate at least two specialized Internet-oriented scripting languages; e.g., Javascript, PERL

4. design, write and debug scripts that use structured programming approaches with an appropriate Internet-oriented scripting language
    4.1 demonstrate the ability to use an appropriate scripting language coding environment
    4.2 outline the intent of the script and determine if the intent can be realized using structured programming approaches
    4.3 write algorithms that use structured programming approaches to realize the intent of the script including:
        4.3.1 use appropriate problem decomposition techniques to break the problem into smaller components
        4.3.2 identify the input, processing and output requirements of each component
        4.3.3 further decompose each component into smaller blocks, as required, using the appropriate structures to control program flow
        4.3.4 write the algorithm in an acceptable format
        4.3.5 use appropriate techniques to determine if the algorithm will achieve the original intent
    4.4 translate the algorithm into a script using structured programming approaches by:
        4.4.1 maintaining the structure of the algorithm
        4.4.2 using appropriate basic or primitive data types
        4.4.3 using appropriate variables and constants, as required, to hold data
        4.4.4 using literals and input commands to provide data for processing
        4.4.5 using assignment, arithmetical, relational, Boolean and, where available, concatenation and string construction operators to process data
        4.4.6 using basic processing idioms such as accumulation, determining maximum or minimum values, as required
        4.4.7 using appropriate selection and iteration structures such as conditional and iterative blocks
        4.4.8 using output commands to display processed data in an appropriately formatted form
        4.4.9 using appropriate internal and external documentation
    4.5 execute the script tracking and eradicating errors including:
        4.5.1 embed the script in an appropriate markup document
        4.5.2 eliminate run-time and logic errors
    4.6 compare the results of the scriptâ€™s execution with the intents of the algorithm and modify, as required

5. demonstrate basic competencies
    5.1 demonstrate fundamental skills to:
        5.1.1 communicate
        5.1.2 manage information
        5.1.3 use numbers
        5.1.4 think and solve problems 
    5.2 demonstrate personal management skills to:
        5.2.1 demonstrate positive attitudes and behaviours
        5.2.2 be responsible
        5.2.3 be adaptable
        5.2.4 learn continuously
        5.2.5 work safely
    5.3 demonstrate teamwork skills to:
        5.3.1 work with others
        5.3.2 participate in projects and tasks

6. make personal connections to the cluster content and processes to inform possible pathway choices
    6.1 complete/update a personal inventory; e.g., interests, values, beliefs, resources, prior learning and experiences
    6.2 create a connection between a personal inventory and occupational choices 
