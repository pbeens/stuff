Alberta

COURSE CSE2210: CLIENT-SIDE SCRIPTING 3

Level: Intermediate

Prerequisites: CSE1220: Client-side Scripting 2
	CSE1120: Structured Programming 2

Description: Students add to their understanding of Internet scripting by employing procedural programming techniques and fundamental data structures to create both static and dynamic client-side sites. Students learn how to analyze, modify, write and debug algorithms and scripts that use subprograms such as functions and data structures such as arrays.

Parameters: Access to appropriate computer equipment, software, support materials and the Internet. Specifically, students must have access to a scripting environment that encourages procedural programming.

Supporting Courses: CSE2010: Computer Science 2
	CSE2110: Procedural Programming 1
	CSE2120: Data Structures 1

Outcomes: The student will:

1. demonstrate basic procedural programming approaches and how they can be used to write Internet scripts
	1.1 include the following features:
		1.1.1 subprograms that can be readily mapped to specific components of a site’s architecture
		1.1.2 the decomposition of complex scripting tasks into subtasks improving site design efficiency, maintainability and extendibility
		1.1.3 the potential for code reuse both in the same and in other scripts and sites
		1.1.4 the enhancement of site security through improved data hiding and information protection
		1.1.5 the enhancement of the readability of site scripts
		1.1.6 the promotion of collaborative work on site scripts
		1.1.7 the reduction of unwanted side effects especially when dealing with multiple scripts

2. demonstrate basic procedural programming approaches and how they can be used to create development libraries of scriptlets
	2.1 demonstrate how they:
		2.1.1 increase design, coding and debugging efficiency
		2.1.2 increase user and/or site interactivity

3. demonstrate the use of data structures in an Internet scripting environment
	3.1 outline the data structures available in a typical Internet scripting environment
	3.2 compare and contrast data structures such as arrays with primitive data types
	3.3 describe and represent the main operations associated with the fundamental data structures supported by a typical Internet scripting environment

4. design scripts for an appropriate Internet-oriented scripting environment that uses procedural programming approaches and fundamental data structures
	4.1 outline the intent of the script and determine if the intent can be best realized through the use of procedural programming approaches
	4.2 determine the data requirements of the script and determine if the intent can be best realized through the use of fundamental data structures 
	4.3 create algorithms that use procedural programming approaches to realize the intent of the script including:
		4.3.1 use a top-down design approach to decompose the problem first into modules and then into submodules
		4.3.2 use pseudocode or an appropriate diagramming technique to illustrate the relationship among the modules
		4.3.3 create more detailed algorithms for each module identifying the pre- and post-conditions and required program control of flow mechanisms
		4.3.4 test and modify the developing algorithm with appropriate data using a “fail-on-paper” process

5. write and debug scripts that use procedural programming approaches and fundamental data structures using an appropriate Internet-oriented scripting environment
	5.1 demonstrate the ability to use an appropriate scripting language coding environment
	5.2 convert the algorithms into scripts consisting of linked modules/subprograms that reflect the structure of the algorithm
	5.3 use appropriate types of subprograms to implement the various sections of the algorithm
	5.4 maintain an appropriate balance between the coupling or dependency and cohesion or focus of the subprograms
	5.5 use internal and external documentation
	5.6 execute the script, and track and eradicate errors
	5.7 compare the results of the script’s execution with the intent of the algorithm and modify, as required

6. demonstrate basic competencies
	6.1 demonstrate fundamental skills to:
		6.1.1 communicate
		6.1.2 manage information
		6.1.3 use numbers
		6.1.4 think and solve problems
	6.2 demonstrate personal management skills to:
		6.2.1 demonstrate positive attitudes and behaviours
		6.2.2 be responsible
		6.2.3 be adaptable
		6.2.4 learn continuously
		6.2.5 work safely
	6.3 demonstrate teamwork skills to:
		6.3.1 work with others
		6.3.2 participate in projects and tasks

7. identify possible life roles related to the skills and content of this cluster
	7.1 recognize and then analyze the opportunities and barriers in the immediate environment
	7.2 identify potential resources to minimize barriers and maximize opportunities 