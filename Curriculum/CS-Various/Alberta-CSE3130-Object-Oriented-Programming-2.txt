Alberta

COURSE CSE3130: OBJECT-ORIENTED PROGRAMMING 2

Level: Advanced

Prerequisite: CSE3120: Object-oriented Programming 1

Description: Students extend their knowledge of object-oriented programming (OOP). They add to their expertise in object-oriented design by using some of the techniques associated with the UML design approach and to their programming expertise by writing programs that explore association between classes. Students work with abstract classes, developing algorithms that employ the object diagram approach and programs that use templated classes, containment and inheritance to promote reusability.

Parameters: Access to appropriate computer equipment, software, the Internet and support materials. Access to OOP environment that encourages a formal treatment of objects.

Supporting Courses: CSE3010: Computer Science 3
	CSE3110: Iterative Algorithm 1

Outcomes: The student will:

1. explain and represent class and object interactions possible in OOP
	1.1 outline the key properties of the OOP approach
	1.2 describe and demonstrate how coding can be reduced and responsibilities distributed through the appropriate use of polymorphism and inheritance
	1.3 describe and represent the relationship among the classes, objects, instances and methods including:
		1.3.1 inheritance
		1.3.2 association
		1.3.3 composition and aggregation
	1.4 describe and represent ways in which inheritance and polymorphism are promoted
	1.5 outline how static classes, polymorphism and inheritance may be used to hide and/or protect data

2. demonstrate OOP skills by writing algorithms employing an object-oriented approach to solving problems
	2.1 apply an object-oriented analysis and design model to decompose a data processing problem into a form that is accessible to an OOP approach by using:
		2.1.1 an informal domain analysis
		2.1.2 an informal use case analysis
		2.1.3 a general design model
	2.2 analyze a data processing problem and use a top-down design approach to transform a design model into a class diagram that represents the matrix of interacting classes required to solve the problem
	2.3 describe and represent the relationship among the classes; e.g., inheritance, association, aggregation, composition
	2.4 use an iterative and incremental approach to refine the architecture into appropriate class or object diagrams showing their relationships 
	2.5 analyze and refine the diagrams identifying the client/server relationship among the objects and determine the messages that need to be passed between objects and how the objects interface
	2.6 draft an informal object message sequence indicating the flow of messages in the system
	2.7 analyze and refine the object design by adding private methods, functions and data structures required to implement the various objects
	2.8 test and modify, as required, the developing algorithm at each stage with appropriate data

3. translate algorithms into source code, convert the source code into machine executable form, execute and debug, as required
	3.1 demonstrate the use iterative and incremental approaches in the implementation, testing and maintenance phases of the software development process
	3.2 demonstrate the use of iterative prototyping or a similar approach to break the algorithm into appropriate sections for implementation
	3.3 use original (user-created) or pre-existing classes, as necessary, to instantiate the objects called for by the algorithm using an iterative and incremental approach
	3.4 as the classes are constructed, use the server classes to create the client classes establishing the client/server relationships called for by the algorithm
	3.5 test and modify the sections as required
	3.6 where appropriate, collaborate with other students to carry out OOP tasks
	3.7 create internal and external documentation
	3.8 analyze the program and eliminate syntax, run-time and logic errors by using appropriate test data for each programming task at each stage of development

4. compare the results of the program with the intent of the algorithm and modify, as required
	(no sub-outcomes)
    
5. demonstrate basic competencies
	5.1 demonstrate fundamental skills to:
		5.1.1 communicate
		5.1.2 manage information
		5.1.3 use numbers
		5.1.4 think and solve problems
	5.2 demonstrate personal management skills to:
		5.2.1 demonstrate positive attitudes and behaviours
		5.2.2 be responsible
		5.2.3 be adaptable
		5.2.4 learn continuously
		5.2.5 work safely
	5.3 demonstrate teamwork skills to:
		5.3.1 work with others
		5.3.2 participate in projects and tasks

6. create a transitional strategy to accommodate personal changes and build personal values
	6.1 identify short-term and long-term goals
	6.2 identify steps to achieve goals 